{"data":{"site":{"siteMetadata":{"title":"Whien's Dev Blog","author":"Whien"}},"markdownRemark":{"id":"d492a0d5-1a5f-5bba-8b2f-2fa510e244a4","excerpt":"Elastic Beanstalk 簡介 Elastic Beanstalk 簡稱 EB，是由 AWS 提供的快速建置並部署環境服務，只要簡單的幾個設定檔，就能輕輕鬆鬆建立好伺服器環境。 Nginx Nginx 是個強大的負載平衡代理伺服器，會負責管理與分配我們的請求與回應，在建立 EB…","html":"<p><img src=\"https://i.imgur.com/AyNenTs.jpg\" alt=\"Photo by Todd Quackenbush on Unsplash\"></p>\n<h1>Elastic Beanstalk 簡介</h1>\n<p>Elastic Beanstalk 簡稱 EB，是由 AWS 提供的快速建置並部署環境服務，只要簡單的幾個設定檔，就能輕輕鬆鬆建立好伺服器環境。</p>\n<h1>Nginx</h1>\n<p>Nginx 是個強大的負載平衡代理伺服器，會負責管理與分配我們的請求與回應，在建立 EB 伺服器時，可以預設是否使用 Nginx 當代理伺服器。</p>\n<h1>Client Max Body Size</h1>\n<p><code class=\"language-text\">client_max_body_size</code> 是 Nginx 中一個設定，能夠指定當有資料進來時，能夠接收的大小有多少，而 EB 在 Nginx 中預設似乎為 1MB，因此導致某個服務在上傳檔案時，發生「413 Request Entity Too Large」，請求資料大小過載的問題，因此開始了尋找解答之旅。</p>\n<h1>網路上找解答</h1>\n<p>找了非常多網路上的資源，都看到類似以下片段</p>\n<div class=\"gatsby-highlight\" data-language=\"config\"><pre class=\"language-config\"><code class=\"language-config\">files:\n  &quot;/etc/nginx/conf.d/proxy.conf&quot;:\n    mode: &quot;000644&quot;\n    owner: root\n    group: root\n    content: |\n      client_max_body_size 10M;\n\ncontainer_commands:\n  01_reload_nginx:\n    command: &quot;service nginx reload&quot;</code></pre></div>\n<p>但怎麼試就是不行，一直沒有產生效果。</p>\n<h1>建立 .ebextensions 目錄</h1>\n<p>後來看討論後發現原來是要先在專案的目錄底下建立 <code class=\"language-text\">.ebextensions</code> 資料夾</p>\n<h1>增加 proxy.config 檔案</h1>\n<p>建立好 .ebextensions 目錄後，接著再增加一個 proxy.config 檔案，並將檔案內容改為</p>\n<div class=\"gatsby-highlight\" data-language=\"config\"><pre class=\"language-config\"><code class=\"language-config\">files:\n  /etc/nginx/conf.d/proxy.conf:\n    mode: &quot;000644&quot;\n    owner: root\n    group: root\n    content: |\n      client_max_body_size 100M;\n\n  /opt/elasticbeanstalk/hooks/configdeploy/post/99_kill_default_nginx.sh:\n    mode: &quot;000755&quot;\n    owner: root\n    group: root\n    content: |\n      #!/bin/bash -xe\n      service nginx stop\n      service nginx start</code></pre></div>\n<p>從檔案內容中可以看出 <code class=\"language-text\">client_max_body_size</code> 更改後要再 <code class=\"language-text\">service nginx stop</code> 與 <code class=\"language-text\">service nginx start</code> 才能正常運行。</p>\n<h1>總結</h1>\n<p>看了網路上百百種解答，調整了老半天，還掛掉導致停機了一段時間，最後內容還是在 AWS Documentation 找到，但至少解決了！</p>\n<hr>\n<h1>工商推廣</h1>\n<h2>Image Resizer - Imgr</h2>\n<p>連結：<a href=\"https://imgr.yosgo.com\" target=\"_blank\" rel=\"nofollow\">Imgr</a></p>\n<blockquote>\n<p><a href=\"https://imgr.yosgo.com\" target=\"_blank\" rel=\"nofollow\">Imgr</a> 是一個輕便的圖片壓縮服務，如果想達到圖片懶載入效果，需要有兩張圖片，通常團隊會自行撰寫圖片壓縮的服務，如果您沒有找到適當的壓縮工具，也想快速的產生壓縮圖片，Imgr(Image Resizer) 會是您的好夥伴。</p>\n</blockquote>","frontmatter":{"title":"透過修改 AWS Elastic Beanstalk Nginx Proxy Config 解決 413 Request Entity Too Large","date":"April 12, 2019","description":"AWS Elastic Beanstalk enviroment 建立時會有預設 client_max_body_size 1MB 的大小限制，導致「413 Request Entity Too Large」問題，找了好多網路答案，最後還是在 AWS 的文件中翻到解答","featuredImage":{"publicURL":"/static/titleImage-b7703eb36784c5e92d49be12e3caf415.jpg"}}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/修改 AWS Elastic Beanstalk Nginx Proxy Config/","previous":{"fields":{"slug":"/透過 Web IntersectionObserver API 優化網站圖片/"},"frontmatter":{"title":"透過 Web IntersectionObserver API 優化網站圖片"}},"next":null}}